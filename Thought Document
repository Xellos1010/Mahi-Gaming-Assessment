Initial Assessment Review - 12/06/24 @ 6:00pm

To start this assignment we need to break this down into its components and prioritize its requirements

FrontEnd - This needs to be developed in react and support the following states:
Base Features
    browsing books
    searching for books by title or author
    viewing book details

Stretch Features:
    user authentication for login and registration functionalities
    a "favorites" list where the user can save and manage their favorite books
    Verify your work with unit tests.
    Use a monorepo build system to structure your project - NX is utilized at Mahi.

Requirements during Development:
    Implement data validation and proper error handling
    Implement Unit tests to validate Development Approach

Database - based on the requirements we need to create a database with the following tables:
Base Features:
    Types:
        type BookDetails
            description String (optional) maybe a book does not have a description

        type Book
            id auto incremented
            name String! (required)
            bookDetails BookDetails (Optional)- Maybe a book doesn't have details yet but we want to display
            imageId String (Optional) A book may or may not have a cover

    Operations:
        Queries:
            getAllBooks(): [Book]
            getBook(id: Number): Book
        Mutations:
            addBook({name: String!, bookDeatils: BookDetails}): Book
            removeBook(id: Number): Book
            updateBook(id: String, name : String (optional), imageID: String optional, bookDetails: BookDetails)
    
Stretch Features:
    To Add:
    (Feature 1 Adding Authentication and User Signup - SignIn)
        Types:
            type User - 
                id auto incremented
                name required (PPI(Personally Identifiable Information): (Special Note: needs to be encrypted at rest and salted so that it needs to be decrypted by a server and is protected)) Since is not part of the requirements this will be a end of cycle feature 
                email required (PPI(Personally Identifiable Information): (Special Note: needs to be encrypted at rest and salted so that it needs to be decrypted by a server and is protected)) Since is not part of the requirements this will be a end of cycle feature 
                password required (Special Note: needs to be encrypted at rest and salted so that it needs to be decrypted by a server and is protected)
                lastLoggedIn DateTime
        Operations:
            Queries:
                getAllUsers():[User]
                getUserById(id: Number): User
                getUserByEmail(email: String): User
            Mutations:
                setUserPassword(email: String, password: String): User
                setLastLoggedIn(time: String): User
                addUser(name: String, email: String, password: String): User
                removeUser(id: Number): User

    (Feature 2 - Adding User Favorites Use Case)
        Types:
            type Book
                usersFavorite [User] 
            type User
                favoriteBooks - relational to [Books] where userFavorite contains User
        Operations:
            Queries:
                getUsersFavoriteBooks(user: User)
            Mutations:
                addUserFavoriteBook(user: User, book: Book): User
                removeUserFavoriteBook(user: User, book: Book): User
BackEnd -
    I prefer a NodeJS Service that runs an Apollo Server hosting a Prisma Local Database since we are containerizing the application. Then I can connect to the apollo servers GraphQL Interface and test my operations.

Middleware - TBD

Special Requirements - (Containerization)
All components needs to be encapsulated in a Container as per the requirement Allow for the entire project to be stood up using a single Docker Compose command.
    1) We need a Docker Componse YAML file

To start lets determine and research the following:
    
    1) Design types Query and Mutation Operations for User and Books - Done in this document
    2) Research NX and understand which part of the development process this is integrated
    3) Start with the MVP Development:
        Front-End:
            a): Box out all components for the MVP, then feature 1, then feature 2
            b): Create a Static Mock Prototype of the MVP Book Store
            c): Add the Interactivity for the Static Mock Prototype with filler API data to begin writing tests
            d) Write Test Cases for front-end components
        Database:
            a): Generate my Schema File
            b): Generate my local database and generate my Resolvers
            c): Write Test Cases for resolvers
            d): Spin up the local instance and run an interacive test.
        Backend:
            a): Write Typescript NodeJs server to interface with database and front-end
            b): Write Test Cases for interactions and errors.
    4) Confirm Working and containerize the environment
    5) Mock a deployment and commit a version 1.
        
Stretch Features:
    Design the Backend Validation for user with password
        This will need a JWT (JSON Web Token) for passing authenticated session details.
        **Extra** Implement ECDH Algorithm for public key exchange and implement Encryptions in Transit and at Rest for sensitive data handling
    Mock out the Components for the FrontEnd
        There will be a feature for User Authentication and Users adding and managing Book Favorites.
    
Doing the mock and implementation in parts will ensure the primary goal is achieved in a reasonable time and showcase organization of integrating and pushing new features. Different stages of the projects state can then be shown to properly commmunicate time management and priority management capabilities.

Development EcoSystem
Environment:
    IDE - Microsoft Visual Studio Code - Great for Safety Nets like Plugins for Linters and Code Formatters
        Plugins: (as we work through the project requirements this list may grow in size)
            ES7+ React/Redux/React-Native snippets (Intellisense - Safety Net)
            Prettier - Code formatter  - (Safety Net)
            YAML = v1.15.0 - (Intellisense - Safety Net) - Docker Compose 
    Version Control System - Git - 
    Nx workspace - to configure, maintain and especially integrate various tools and frameworks
    Code Formatter: Prettier
    TypeChecker: Typescript
    JS Module System Standards: ECMA Script

Initial Setup and Project Path:
Since the Initial NX Setup creates a React Project it would be best to create the front-end and have placeholders for the data and api calls for now.

Running through the tutorial we can add a store app and an inventory app then a library that can switch between the 2. This will be great for getting the Books Management online and the storefront online and the responsibilities separated so that the store displays the output of the inventory.
**Note** this will probably work will for a users pool but we need to build the database to be relational so I need to do more research as to whether Inventory is the correct approach. **Note**
After doing some research (https://www.reddit.com/r/node/comments/1as8wmk/can_we_use_one_db_in_two_or_more_different/?rdt=44870) I came to the conclusion that the best approach to have 3 front-ends. 1 for user management, 1 for book management and a book store that users can register and interact but books can only be created in the books inventory frontent. 
TODO - create a prisma library that is shared between the Books Inventory and User Management Front-end

Now that the Prisma library is generated I need to spin up a backend that will connect to my postgres database.
I am considering utilizing the nestjs framework as it supports typescript out of the box from reviews I have researched which I like the idea of.

12/09/2024 @ 11:30pm
After researching into NestJS it seems like I need to implement a couple phases.
The first phase is with a coupled database so that I can integrate and test features quickly.
The second phase would be to develop middleware funcitons that I can use to pre-process requests and the coressponding response objects when I want to add security
The final phase if time permits would be to integrate a DatabaseDynamicModule so that I can support multiple databases in the future.

Finalized the deployment configuration for the docker compose and docker file. Included visual admin interface for postgres so that we can add data easily.

12/06/24 @ 1:00pm
I need to deploy a basic front-end with my docker-compose file to test the end to end service.
I can start with mock data but since I have everything running in a basic sense I can test it for actual data.
Tasks:
Components Requires:
browsing books
searching for books by title or author
viewing book details.

Create the components for: 
Book which will hold and display the information about the book with a show more button
FilterableBooksDisplay which will hold the Book Components and allow you to filter the booksDisplayed array by the search terms in the SearchFilterableBooks component.
SearchFilterableBooksInput which will allow you to Input your search query by either Author

12/06/24 @ 5:30pm
Considering the review I had with Michael I decided to implement UserInterface and BookInterface in prisma. that way I can import these interfaces along with query, mutation and expected returns to standardize the callign process.
I implemented the interfaces in the mock unit tests and ensured passing before continuing

@9:00 pm
After some research for how to ensure DTO's are compliant with future proofing standards but also separation of concerns I have decided to utilize types that the interfaces and DTO objects will extend separatly. This will ensure that the interface that drives the Prisma Lib and the DTOs that drive NestJS logic are decoupled.

@3:00am
more research has revealed that when you use prisma generate command it generates internal types such as:
import { Prisma } from '@prisma/client';
Prisma.UserCreateInput

which can be utilized to create clear separation of concerns and minimal points of contact for code updates.

// Prisma's generated input type for user creation
export class CreateUserDto implements Prisma.UserCreateInput {
  email: string;
  name?: string | null;
  password: string;
}

I can also utilize Pick to select specific fields if I want to create static endpoints:
// Custom DTO for updating the user's email only
export class UpdateUserEmailDto implements Pick<Prisma.UserUpdateInput, 'email'> {
  email: string;
}

There are advance query extraction features that can be implemented:

async function updateUser(params: Prisma.UserUpdateInput, where: Prisma.UserWhereUniqueInput) {
  return prisma.user.update({
    data: params,
    where,
  });
}

There is also a way to create a reusable DTO Utility map DTOs' dyanmically in the following example:
5. Reusable Mapped Types for Consistency
To maintain consistency between DTOs and Prisma types, you can map types dynamically.

Example: Reusable DTO Utility

import { Prisma } from '@prisma/client';
import { Type } from '@nestjs/common';

// Utility to map Prisma types to DTOs
type PrismaDto<T> = T extends Prisma.UserCreateInput
  ? Partial<T>
  : T extends Prisma.UserUpdateInput
  ? Required<T>
  : never;

// Example usage in DTOs
export class UserDto implements PrismaDto<Prisma.UserCreateInput> {
  email: string;
  name?: string | null;
}

There is a utility that automatically generates NestJS DTO Objects: https://www.npmjs.com/package/@vegardit/prisma-generator-nestjs-dto

12/10/2024 @ 5:26pm
After some more research regarding where the architectural decision on where to house DTO's and any shared types for the sake of convience and ease of developing this application we will implement the PrismaClient directly into the backend for the following reasons:
no need to shared types or DTOs across multiple applications.
The backend is the sole consumer of the database layer, and I don't expect other apps to need these types or DTOs.

To ensure everything updates with the PrismaClient I will implement interfaces in the prisma/lib and the backend that implement the Prisma.client types generated

I am also consolidating all types to a main file to be able to more easily traverse the hierarchy

@6:51
Finalized Prisma lib implementing the types fromt he generated client and finalizing the unit tests. Now I can move onto DTO generation and writing unit tests for the backend nestJS, then I will run a manual test invoking the endpoint with various curl commands for expediency and finally working with the mock static prorotype first, then interaction then real-time data integration.
First phase will be basic filterable books table with search field and static data.
Then will be integration of tan-stack query so that I can cache data locally on re-get requests.
Then it will be version 1 completed and I can move onto user login and registration.
Once login and registration is all good then I can move onto favorites.
Once favorites are implemented I can work on implementing encryption and decryption which include JWT tokens.
Then styling and finishing touches.

@11:55pm Writing e2e tests for nestjs backend with new lib library
after starting I realized that I need access to the DTO Objects to conform the tests inputs and future-proof modifications. For now i will add the input to the ts.config as an include file to include DTO's for reference

for the ability to hot-reload the backend while workign through e2e tests I've installed npm install --save-dev nodemon

Adding and removing a favorite book failed for books but that is okay for now. we will move on to get the basic front-end in place then return to user e2e tests and including the user favorites once we register and log in.

@ 12/11/2024 12:50am
Finalized book e2e tests for book and moving on to Static Mock Prorotype for Front-end
I need components for the following:
FilterableBooksCatalog - This will be the container for the SearchFilterableBooksCatalogInput which will have inputs which when changes to the input end it will raise an event to apply the search to the FilterableBooksDisplay which will display the array of books data.
The FilterableScrollableBooksDisplay will display Rows of BookRowData which will display the books title and author and when clicked will expand to show BookMoreInfo component which will have either a placeholder image if no image url is present or the image from imageId and the description of the book. If the BookMoreInfo component or the BookRowData are clicked again the BookRowData hides and in the future I want to be able to add a roll-in/roll-out animation to show the more data.

@1:40am 
Finalized static mock prototype for filtering books.
Features implemented
Filters are applied after each keystroke - backspacing produces the expected results as well
On row click displays more info component.
static data

All components are in 1 directory right now until we get to the end of the interactivity stage. Then we will re-organize and continue

@2:18am - added basic auth wrapper, querying to my database and enabling cors for differentiated environments. temporary until i package and connect to the same docker network.

@12:53pm
Since I have the basic components finished and tested:
"The application should allow users to browse books, search for books by title or author, and view book details."

I am going to start working on the next part integrating the Zod Form Validation for sign-up and login.
Afterwards I will put in a tab manager that will allow a user to toggle between searching and favorites management

I will need a LoginComponent, a RegisterComponent, Utilize zod for form validation, add UserContext wrapper to manage user favorites. Add a TabViewManager Component that allows us to toggle between the Catalog View and Favorites view. The FavoritesViewComponent should have a FilterableCatalog as wel that has the same features as the regular view but with the addition of Removing Favorite Book button on the right side of the RowData. The  BookDataRow component should display an Add To Favorites Button on the right side when not in Catalog View

@7:30pm
Since developing the Auth components and view components I switched back to the backend so that I can create an auth controller and add error handling to my backend.
Creating unit tests for mock tests and integration tests with e2e before switching back to the frontend

@10:12
Went down the rabbit hole and figured out how to incorporate scss style sheets.
I still need to setup e2e but now I have a great looking appication!